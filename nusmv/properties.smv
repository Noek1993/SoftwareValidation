

-- For each of the tracks T3A and T3B there is at least one test case
-- in which the track is occupied at least once.

CTLSPEC EF T3A_occupied
CTLSPEC EF T3B_occupied

--// Each signal has to be red or green but can not be both
LTLSPEC G((S1A_red | S1A_green) & !(S1A_red & S1A_green))
LTLSPEC G((S2A_red | S2A_green) & !(S2A_red & S2A_green))
LTLSPEC G((S3A_red | S3A_green) & !(S3A_red & S3A_green))
LTLSPEC G((S4A_red | S4A_green) & !(S4A_red & S4A_green))
LTLSPEC G((S1B_red | S1B_green) & !(S1B_red & S1B_green))
LTLSPEC G((S2B_red | S2B_green) & !(S2B_red & S2B_green))
LTLSPEC G((S3B_red | S3B_green) & !(S3B_red & S3B_green))
LTLSPEC G((S4B_red | S4B_green) & !(S4B_red & S4B_green))

--// Signal shows red if passing the signal is not save, because of occupied tracks or unlocked points
--// S2A
LTLSPEC G(((T2A_occupied | T3A_occupied) & P1A_locked_straight) -> S2A_red )
LTLSPEC G(((!P2B_locked_curved | T2A_occupied | T3B_occupied | T4B_occupied) & P1A_locked_curved) -> S2A_red)
LTLSPEC G((!P1A_locked_curved & !P1A_locked_straight) -> S2A_red)

--// S2B
LTLSPEC G(((T2B_occupied | T3B_occupied) & P1B_locked_straight) -> S2B_red)
LTLSPEC G(((!P2A_locked_curved | T2B_occupied | T3A_occupied | T4A_occupied) & P1B_locked_curved) -> S2B_red)
LTLSPEC G((!P1B_locked_curved & !P1B_locked_straight) -> S2B_red)

--// S3A
LTLSPEC G(!P1A_locked_straight -> S3A_red)
LTLSPEC G(((T1A_occupied | T2A_occupied) & P1A_locked_straight) -> S3A_red)

--// S3B
LTLSPEC G(!P1B_locked_straight -> S3B_red)
LTLSPEC G(((T1B_occupied | T2B_occupied) & P1B_locked_straight) -> S3B_red)

--// S4A
LTLSPEC G((T4A_occupied & P2A_locked_straight) -> S4A_red)
LTLSPEC G(((!P1B_locked_curved | T2B_occupied | T1B_occupied | T4A_occupied) & P2A_locked_curved) -> S4A_red)
LTLSPEC G((!P2A_locked_straight & !P2A_locked_curved) -> S4A_red)

--// S4B
LTLSPEC G((T4B_occupied & P2B_locked_straight) -> S4B_red)
LTLSPEC G(((!P1A_locked_curved | T2A_occupied | T1A_occupied | T4B_occupied) & P2B_locked_curved) -> S4B_red)
LTLSPEC G((!P2B_locked_straight & !P2B_locked_curved) -> S4B_red)

--// The system never issues conflicting commands
LTLSPEC G(P1A_goal_curved -> (P2B_goal_curved | P2B_locked_curved))
LTLSPEC G(P2B_goal_curved -> (P1A_goal_curved | P1A_locked_curved))
LTLSPEC G(P1A_goal_straight -> (P2B_goal_straight | P2B_locked_straight))
LTLSPEC G(P2B_goal_straight -> (P1A_goal_straight | P1A_locked_straight))

LTLSPEC G(P1B_goal_curved -> (P2A_goal_curved | P2A_locked_curved))
LTLSPEC G(P2A_goal_curved -> (P1B_goal_curved | P1B_locked_curved))
LTLSPEC G(P1B_goal_straight -> (P2A_goal_straight | P2A_locked_straight))
LTLSPEC G(P2A_goal_straight -> (P1B_goal_straight | P1B_locked_straight))

--// The points always follow the given commands
LTLSPEC G(P1A_goal_curved -> ((P1A_goal_curved U (P1A_locked_curved | P1A_goal_straight)) & F P1A_locked_curved))
LTLSPEC G(P1A_goal_straight -> (P1A_goal_straight U P1A_locked_straight))

LTLSPEC G(P1B_goal_curved -> ((P1B_goal_curved U (P1B_locked_curved | P1B_goal_straight)) & F P1B_locked_curved))
LTLSPEC G(P1B_goal_straight -> (P1B_goal_straight U P1B_locked_straight))

LTLSPEC G(P2A_goal_curved -> ((P2A_goal_curved U (P2A_locked_curved | P2A_goal_straight)) & F P2A_locked_curved))
LTLSPEC G(P2A_goal_straight -> (P2A_goal_straight U P2A_locked_straight))

LTLSPEC G(P2B_goal_curved -> ((P2B_goal_curved U (P2B_locked_curved | P2B_goal_straight)) & F P2B_locked_curved))
LTLSPEC G(P2B_goal_straight -> (P2B_goal_straight U P2B_locked_straight))

--// Trains always make progress
LTLSPEC G((T1A_occupied & X (T2A_occupied)) -> ( F T3A_occupied | F T4B_occupied))
LTLSPEC G((T2A_occupied & X (T3A_occupied)) -> ( F T4A_occupied))
LTLSPEC G((T3A_occupied & X (T4A_occupied)) -> ( F T2B_occupied))
LTLSPEC G((T4A_occupied & X (T2B_occupied)) -> ( F T1B_occupied))
LTLSPEC G((T2A_occupied & X (T4B_occupied)) -> ( F T3B_occupied))
LTLSPEC G((T4B_occupied & X (T3B_occupied)) -> ( F T2B_occupied))
LTLSPEC G((T3B_occupied & X (T2B_occupied)) -> ( F T1B_occupied))
LTLSPEC G(T1A_occupied -> F !T1A_occupied)

LTLSPEC G((T1B_occupied & X (T2B_occupied)) -> ( F T3B_occupied | F T4A_occupied))
LTLSPEC G((T2B_occupied & X (T3B_occupied)) -> ( F T4B_occupied))
LTLSPEC G((T3B_occupied & X (T4B_occupied)) -> ( F T2A_occupied))
LTLSPEC G((T4B_occupied & X (T2A_occupied)) -> ( F T1A_occupied))
LTLSPEC G((T2B_occupied & X (T4A_occupied)) -> ( F T3A_occupied))
LTLSPEC G((T4A_occupied & X (T3A_occupied)) -> ( F T2A_occupied))
LTLSPEC G((T3A_occupied & X (T2A_occupied)) -> ( F T1A_occupied))
LTLSPEC G(T1B_occupied -> F !T1B_occupied)

--// There is a trace in which T3A is occupied
CTLSPEC EF T3A_occupied
--// This one is dupilcate with the example already present in this file

--// There is a trace in which the trains pass each other in the middle
CTLSPEC EF (T3A_occupied & T3B_occupied)

--// There is a trace is in which T3B and T1B are both occupied at the same time
CTLSPEC EF (T3B_occupied & T1B_occupied)

--// There is a trace in which T1A and T1B are both occupied at the same time
CTLSPEC EF (T1A_occupied & T1B_occupied)







