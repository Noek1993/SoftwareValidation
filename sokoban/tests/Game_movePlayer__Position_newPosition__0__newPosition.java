/*
 * Test data strategy for Game.
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2016-10-06 14:37 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

import java.util.ArrayList;
import java.util.List;

import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;

/**
 * Test data strategy for Game. Provides
 * test values for parameter "Position newPosition" 
 * of method "boolean movePlayer(Position)". 
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2016-10-06 14:37 +0200
 */
public /*@ nullable_by_default */ class Game_movePlayer__Position_newPosition__0__newPosition
  extends Game_ClassStrategy_Position {
  /**
   * @return local-scope values for parameter 
   *  "Position newPosition".
   */
  public RepeatedAccessIterator<?> localValues() {
  	List<Object> list = new ArrayList<Object>();
  	for (int x = 0; x < 8; x++) {
  		for (int y = 0; y < 8; y++) {
  			list.add(new Position(x,y));
  		}
  	}
    return new ObjectArrayIterator<Object>
    (list.toArray());
  }

  /**
   * Constructor.
   * The use of reflection can be controlled here for  
   * "Position newPosition" of method "boolean movePlayer(Position)" 
   * by changing the parameters to <code>setReflective</code>
   * and <code>setMaxRecursionDepth<code>.
   * In addition, the data generators used can be changed by adding 
   * additional data class lines, or by removing some of the automatically 
   * generated ones. Since this is the lowest level of strategy, the 
   * behavior will be exactly as you specify here if you clear the existing 
   * list of classes first.
   *
   * @see NonPrimitiveStrategy#addDataClass(Class<?>)
   * @see NonPrimitiveStrategy#clearDataClasses()
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
  public Game_movePlayer__Position_newPosition__0__newPosition() {
    super();
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
