/*
 * Test data strategy for Game.
 *
 * Generated by JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178), 2016-10-06 14:37 +0200.
 * (do not modify this comment, it is used by JMLUnitNG clean-up routines)
 */

import java.util.LinkedList;
import java.util.List;

import org.jmlspecs.jmlunitng.iterator.InstantiationIterator;
import org.jmlspecs.jmlunitng.iterator.IteratorAdapter;
import org.jmlspecs.jmlunitng.iterator.NonNullMultiIterator;
import org.jmlspecs.jmlunitng.iterator.ObjectArrayIterator;
import org.jmlspecs.jmlunitng.iterator.RepeatedAccessIterator;
import org.jmlspecs.jmlunitng.strategy.ObjectStrategy;

/**
 * Test data strategy for Game. Provides
 * instances of Game for testing, using
 * parameters from constructor tests.
 * 
 * @author JMLUnitNG 1.4 (116/OpenJML-20131218-REV3178)
 * @version 2016-10-06 14:37 +0200
 */
public /*@ nullable_by_default */ class Game_InstanceStrategy extends ObjectStrategy {
  /**
   * @return local-scope instances of Game.
   */
  public RepeatedAccessIterator<?> localValues() {
    Player p = new Player (new Position (3, 3));
    Board a = new Board (7, 7);
    Board b = new Board (7, 7);
    Board c = new Board (7, 7);
    for (int x = 1; x < 6; x++) {
      for (int y = 1; y < 6; y++) {
        a.items[x][y].ground = true;
        b.items[x][y].ground = true;
        c.items[x][y].ground = true;
      }
    }
    // Board arrangement A (Empty push board)
    Game ga = new Game (a, p);
    
    // Board arrangement B (Box board)
    b.items[3][1].crate = true;
    b.items[3][2].crate = true;
    b.items[3][4].crate = true;
    b.items[1][3].marked = true;
    b.items[2][3].crate = true;
    b.items[4][3].crate = true;
    b.items[5][3].ground = false;
    Game gb = new Game (b, p);
    
    // Board arrangement B (Wall board)
    c.items[2][2].ground = true;
    c.items[3][2].ground = true;
    c.items[4][2].ground = true;
    c.items[4][3].ground = true;
    c.items[4][4].ground = true;
    c.items[3][4].ground = true;
    c.items[2][4].ground = true;
    c.items[2][3].ground = true;
    Game gc = new Game (c, p);
	  
    return new ObjectArrayIterator<Object>
    (new Object[]
     { ga, gb, gc /* add Game values or generators here */ });
  }

  /**
   * @return default instances of Game, generated
   *  using constructor test parameters.
   */ 
  public RepeatedAccessIterator<Game> defaultValues() {
    final List<RepeatedAccessIterator<Game>> iters = 
      new LinkedList<RepeatedAccessIterator<Game>>();

    // an instantiation iterator for the default constructor
    // (if there isn't one, it will fail silently)
    iters.add(new InstantiationIterator<Game>
      (Game.class, 
       new Class<?>[0], 
       new ObjectArrayIterator<Object[]>(new Object[][]{{}})));

    // parameters for method Game(Board, Player)
    iters.add(new InstantiationIterator<Game>
      (Game.class, 
       new Class<?>[]
       {Board.class, 
        Player.class},
       Game_JML_Test.p_Game__Board_board__Player_player__0().wrapped()));

    return new NonNullMultiIterator<Game>(iters);
  }

  /**
   * Constructor. The boolean parameter to <code>setReflective</code>
   * determines whether or not reflection will be used to generate
   * test objects, and the int parameter to <code>setMaxRecursionDepth</code>
   * determines how many levels reflective generation of self-referential classes
   * will recurse.
   *
   * @see ObjectStrategy#setReflective(boolean)
   * @see ObjectStrategy#setMaxRecursionDepth(int)
   */
  public Game_InstanceStrategy() {
    super(Game.class);
    setReflective(true);
    // uncomment to control the maximum reflective instantiation
    // recursion depth, 0 by default
    // setMaxRecursionDepth(0);
  }
}
